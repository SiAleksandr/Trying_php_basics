<?php

class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
$a1 = new A();
$a2 = new A();

$a1->foo(); // 1 
$a2->foo(); // 2
$a1->foo(); // 3
$a2->foo(); // 4

// В итоге в терминале будет: 
// 1234
// Потому что переменная $x создана, как static 
// Она принадлежит классу, а не объекту. 
// И поэтому вызов функции foo() у любого
// объекта класса A изменит значение static $x 
// глобально. То есть при каждом новом вызове
// этой функции экземпряр класса A будет работать
// со значением переменной $x , которое будет
// на тот момент.

//=================================================

class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class B extends A {
}

$a1 = new A();
$b1 = new B();

$a1->foo(); // 1
$b1->foo(); // 2
$a1->foo(); // 3
$b1->foo(); // 4

// Тут в терминале будет 
// 1234 
// По той же причине, что и в первом
// примере, потому что класс B наследует
// свойства и методы класса A и должен
// только расширять родительский класс A