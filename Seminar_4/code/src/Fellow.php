<?php

// Идея в том, что есть любители слушать виниловые
// пластинки, которые объединяются в сообщества.
// Условие вступления в сообщество - это наличие
// собственных виниловых пластинок (коллекции).
// Участник сообщества может поискать и попросить
// у других представителей своего сообщества
// интересующую его пластинку.

namespace Hwapp\Oop;

class Fellow {

    // ! Есть, но не реализованы методы поиска пластинок !

    private static $lastId = 0;

    private int $id;

    private string $name;

    private string $lastName;

    private array $collection;

    private array $membership;

    public function __construct
    (
        string $name, 
        string $lastName,
        array $vinylList
    ) {
        $this->id = self::$lastId;
        self::$lastId += 1;
        $this->name = $name;
        $this->lastName = $lastName;
        $this->membership = array();

        $this->listAssign($vinylList);
    }

    public function getId(): int {
        return $this->id;
    }

    public function getFullName(): string {
        return $this->name . " " . $this->lastName;
    }

    private function listAssign(array $vinylList): bool {
        $control = 0;
        foreach($vinylList as $vinyl) {
            if($vinyl instanceof Vinyl) {
                $vinyl->decideTheOwner($this);
                $control += 1;
            }
        }
        if($control == count($vinylList)) {
            $this->collection = $vinylList;
            return true;
        }
        return false;
    }

    public function inspectCollection(): bool {
        if(isset($this->collection)) {
            return true;
        }
        return false;
    }

    public function getGroupList(): array {
        return $this->membership;
    }

    public function getCollection(): array {
        return $this->collection;
    }

    public function askToJoin($middleman): bool {
        if(count($middleman->getGroupList()) > 0) {
            for($i = 0; $i < count($middleman->getGroupList()); $i++) {
                if(!$middleman->getGroupList()[$i]->checkMembership($this)) {
                    echo $middleman->getGroupList()[$i]->getDescription() . PHP_EOL;
                    $answer = readline("Вступить в такую группу (y/n): ");
                    if($answer == "y") {
                        return $middleman->getGroupList()[$i]->addNew($this);
                    }
                }
            }
        }
        return false;
    }

    public function addInGroup($person, int $index): bool {
        if($index < count($this->membership) && $index >= 0
        && !($this->membership[$index]->checkMembership($person))) {
            return $this->membership[$index]->addNew($person);
        }
        return false;
    }

    public function joinCommunityAnyway($community): void {
        array_push($this->membership, $community);
    }

    public function joinCommunity($community): bool {
        if($community->checkMembership($this)) {
            return false;
        }
        $this->joinCommunityAnyway($community);
        return true;
    }

    public function totalSearchByArtist
    (string $artist, int $index = 0): string {
        /* Берётся из массива сообществ одно, по индексу,
        - второму аргументу метода. У этого и далее у 
        каждого сообщества из методов поиска проверяется
        само сообщество на наличие участников своим методом 
        inspectPartakersList(). Сейчас, при результате
        false сам этот метод возвращает текстовое 
        предупреждение о несоответствии сообщества. 
        Если всё нормально, то запускается цикл по всем 
        членам сообщества. Если у текущего участника
        $id совпадает с $id вызывающего этот метод, то он
        не рассматривается. Если не совпадает, то у него
        берётся циклом каждая пластинка из его коллекции,
        и если совпвдает свойство $performerOrComposer с
        тем, кото указан как $artist в аргументах этого
        метода, то счётчик увеличивается на 1 (в начале 
        цикла по пластинкам текущего участника 
        ему даётся значение = 0). Когда пройден
        внутренний цикл по пластинкам текущего участника,
        проверяется тот счётчик, и если он > 0 , то в
        изначально созданную текстовую переменную добавляется 
        $id только что проверенного участника, его 
        имя и фамилия, а так же счётчик со словами 
        " альбомов " . $счётчик . PHP_EOL; Это количество 
        пластинок указанного исполнител\композитора 
        у данного участника. В итоге метод возвращает
        сложившуюся переменную, а если она равна ""
        (пустая строка), то возвращается сообщение,
        что ни у кго в сообществе нет пластинок 
        указанного в аргументах исполнителя\композитора.
        */
    }

    public function searchByArtist
    (string $artist, int $id, $index = 0): string {
        /*
        Метод принимает $artist, - это исполнитель\композитор,      
        $id нужного участника из сообщества, которое
        берётся из массива сообществ $this->membership,
        по индексу $index. Если это $id == $this->id , то
        сразу возвращается текстовое сообщение об ошибке.
        Как говорилось ранее, если проверка полученного
        сообщества дала false, то сейчас этот метод
        вернёт текстовое сообщение о несоответствии 
        сообщества. Если всё нормально, работа продолжается.
        Метод берёт циклом всё сообщество и, если находит
        участника с id == $id (берёт его в методом getId())
        то идёт ещё одним циклом по его коллекции. Если
        метод getPerformerOrComposer(), вызванный у очередной
        пластинки, совпадает с $artist, то добавляется
        в заранее созданную переменную результат showTheMain(),
        вызванный у этой пластинки (наследника Vinyl). Таким
        образом возвращается эта переменная, содержащая 
        наименования (результаты showTheMain()) имеющихся
        у взятого участника пластинок этого исполнителя\композитора.
        $id нужного участника можно посмотреть в результатах
        метода totalSearchByArtist(). Если в конце переменная == ""
        (пустая строка), то возвращаеся текст, оповещающий, что
        у данного пользователя нет пластинок заданного 
        исполнителя\композитора, или нет такого пользователя
        в заданном сообществе.
        */
    }

    public function takeOneVinyl
    (string $vinylMainInfo, int $id, int $groupNum = 0): array {
        /*
        Метод принимает $vinylMainInfo - это нужно для поиска
        нужной пластинки. $id - это свойство id участника
        сообщества, у которого решено попросить пластинку.
        $groupNum - это индекс сообщества из массива сообществ
        $this->membership , в котором состоит участник с id == $id.
        Но как и раньше, сообщество проверяется, и работа метода
        будет прлолжена, если проверка дала true, Если не так, то
        сразу то возвращается [false, "в заданном сообществе никого нет"].
        Если $id == $this->id , то метод сразу возвращает 
        [false, "недопустимый id"]. Сначала цикл for(...) перебирает 
        участников заданного сообщества и, если встречает 
        того, у кого метод getId() даст равное $id , то начинается 
        вложенный цикл, перебирающий коллекцию найденного
        участника. У каждой пластинки сравнивается результат
        showTheMain() с $vinylMainInfo и, если они равны, то
        выводится полная информация о данной пластинке методом
        toString(). В случае, когда решено попросить эту пластинку,
        у неё проверяется свойство $posture, получаемое методом getPosture()
        и, если оно равно константе Vinyl::ALOOF, то метод возвращает
        [false, "владелец уже дал кому-то эту пластинку"].
        Если $posture другое (то есть единственно возможное
        Vinyl::AVAILABLE), то запрашивается разрешение у владельца.
        Если оно получено, то в свойство объекта пластинки $holder 
        методом appointTemporary() помещается сам ищущий, а у объекта 
        пластинки меняется свойство $posture методом changePosture().
        Сам же описываемый метод в этом случае возвращает
        [true, "Взять пластинку получилось"]. Если владелец отказал, 
        то возвращается [false, "Владелец не согласился дать эту пластинку"]. 
        Если внутренний цикл дошёл до конца и ничего не вернул, то сам метод 
        возвращает [false, "у этого участника не найдено описанной пластинки"].
        Если внешний цикл завершится не найдя участника с указанным $id,
        то метод вернёт [false, "в сообществе не найдено участника с таким id"].
        */
    }

    public function totalSearchByTheMain(string $vinylMainInfo, $index = 0): string {
        /*Метод принимает $vinylMainInfo. Это то, что 
        соответствует получаемому методом showTheMain() 
        класса Vinyl. Поиск происходит в сообществе, взятом
        из массива сообществ $this->membership под
        индексом $index. Опять же, работа продолжается,
        только если проверка полученного сообщества дала true. 
        Иначе возвращается сообщение о несоответствии.
        Цикл перебирает участников этого сообщества, 
        а вложенный цикл перебирает пластиннки каждого 
        участника. В самом начале метода создаётся
        переменная = "" (пустая строка). Когда вложенный цикл
        находит пластинку, у которой метод showTheMain() 
        даёт равное $vinylMainInfo, тогда в ту переменную
        добавляется id текущего участника, взятое его
        методом getId(), и его имя с фамилией, полученные его
        методом getFullName(). И ещё PHP_EOL. Затем счётчику 
        цикла (for($i = 0 ...)) присваивается значение
        count($collection), то есть общее количество пластинок
        у текущего пользователя. Это нужно, чтобы сразу
        завершить текущий цикл и перейти к следующему
        участнику. В итоге этот метод возвращает ту
        переменную, содержащую соответственные id и имена 
        участников, у которых есть возможный вариант 
        нужной пластинки. Если переменная содержит
        пустую строку, то возвращается текстовое сообщение
        оповещающее об отсутствии описанной пластинки. 
        */
    }

    public function getLinksOfAloof(): string {
        /*
        Метод проходит по всей коллекции этого 
        пользователя циклом for и если
        свойство $posture очередной пластинки 
        (getPosture()) - это константа Vinyl::ALOOF, 
        то её индекс из массива $collection
        добавляется как строковый тип в строковую
        переменную, и ещё добавляется запятая.
        После всего цикла убирается крайняя 
        запятая при помощи функции trim(). 
        Возвращается полученная строковая переменная.
        */
    }

    public function takeBack(string $artist): bool {
        /*
        Этод метод использует метод getLinksOfAloof()
        и создаёт из полученной строки массив при помощи
        функции explode(), разделив по символу ","
        Потом в цикле берутся его элементы, как индексы
        для массива $collection, получая таким образом
        по очереди пластинки, которые пользователь уже 
        дал кому-то послушать. У очередной пластинки
        узнаётся $performerOrComposer соответственным 
        методом и, если он совпадает с аргументом $artist,
        то методом toString(), взятом у пластинки, выводится  
        на экран полная информация об этой пластинке. 
        К этому добавляется имя держателя, полученное
        от экземплчра пластинки методом getHolderName().
        Если решено забрать её, то методом changePosture()
        класса Vinyl у пластинки изменяется
        свойство $posture, и функция возвращает true.
        В противном случае цикл продолжается и предлагается
        следующая подходящая по заданому исполнителю\композитору 
        пластинка. В случае завершения цикла возвращается false. 
        */
    }

    public function toString(): string {
        $res = $this->getFullName() . ". Описания сообществ:" . PHP_EOL;
        for($i = 0; $i < count($this->membership); $i++) {
            $res .= $this->membership[$i]->getDescription() . PHP_EOL;
        }
        return $res;
    }
}